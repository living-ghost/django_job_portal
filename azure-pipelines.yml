trigger:
- main

variables:
  # Azure Resources
  azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
  resourceGroup: 'Project-Freshers_Park_Resource'
  containerRegistry: 'Project-Freshers-Park-App.azurecr.io'
  containerAppName: 'django-app'
  containerAppEnv: 'Project-Freshers-Park-App'
  composeFilePath: '**/docker-compose.yml'
  
  # Application Settings (non-secrets)
  DJANGO_SETTINGS_MODULE: 'your_project.settings.production'
  DB_HOST: 'postgres'  # or your Azure Database server name
  DB_PORT: '5432'
  DEBUG: 'False'
  ALLOWED_HOSTS: 'your-app-name.azurecontainerapps.io'
  PGADMIN_DEFAULT_EMAIL: 'admin@yourdomain.com'

stages:
- stage: Build
  displayName: Build and push images
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureKeyVault@1
      displayName: 'Get secrets from Key Vault'
      inputs:
        azureSubscription: $(azureSubscription)
        KeyVaultName: 'Freshers-Park-Keys'  # Replace with your Key Vault name
        SecretsFilter: '*'
        RunAsPreJob: true

    - task: DockerCompose@0
      displayName: 'Build services'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(composeFilePath)
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'
        dockerComposeFileArgs: |
          DB_NAME=$(DB-NAME)
          DB_USER=$(DB-USER)
          DB_PASSWORD=$(DB-PASSWORD)
          SECRET_KEY=$(SECRET-KEY)
          EMAIL_HOST_PASSWORD=$(EMAIL-HOST-PASSWORD)
          PGADMIN_DEFAULT_PASSWORD=$(PGADMIN-DEFAULT-PASSWORD)

    - task: DockerCompose@0
      displayName: 'Push services'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(composeFilePath)
        action: 'Push services'
        additionalImageTags: '$(Build.BuildId)'

- stage: Deploy
  displayName: Deploy to Azure Container Apps
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Container Apps'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Container Apps extension
          az extension add --name containerapp --upgrade
          
          # Login to ACR
          az acr login --name $(containerRegistry)
          
          # Get the latest image tags
          WEB_IMAGE=$(az acr repository show-tags --name $(containerRegistry) --repository your_web_image_name --orderby time_desc --query [0] -o tsv)
          
          # Create or update container app
          az containerapp create \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --environment $(containerAppEnv) \
            --image $(containerRegistry)/your_web_image_name:$WEB_IMAGE \
            --target-port 8000 \
            --ingress external \
            --env-vars \
              DJANGO_SETTINGS_MODULE=$(DJANGO_SETTINGS_MODULE) \
              DB_HOST=$(DB-HOST) \
              DB_PORT=$(DB-PORT) \
              DB_NAME=$(DB-NAME) \
              DB_USER=$(DB-USER) \
              DEBUG=$(DEBUG) \
              ALLOWED_HOSTS=$(ALLOWED-HOSTS) \
            --secrets \
              db-password=$(DB-PASSWORD) \
              secret-key=$(SECRET-KEY) \
              email-password=$(EMAIL-HOST-PASSWORD)
          
          # For production, consider using Azure Database instead of containerized DB
          echo "For production, use Azure Database for PostgreSQL instead of containerized database"