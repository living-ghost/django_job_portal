trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'd932d5a2-7e91-48b9-b339-918c998b3ae9'
  containerRegistry: 'freshersparkregistry.azurecr.io'
  
  # Image repositories
  celeryImageRepository: 'freshersparkcelery'
  celeryDockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.celery'
  
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

  # Environment configuration
  environmentType: 'dev'  # Set to 'prod' for production
  keyVaultName: 'freshersparkkeyvault'  # Your Azure Key Vault name

stages:
- stage: Build
  displayName: Build and push Celery image
  jobs:
  - job: BuildCelery
    displayName: Build Celery Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push Celery image
      inputs:
        command: buildAndPush
        repository: $(celeryImageRepository)
        dockerfile: $(celeryDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        buildContext: '$(Build.SourcesDirectory)'

- stage: Deploy
  displayName: Deploy Celery Worker
  dependsOn: Build
  jobs:
  - job: DeployCelery
    displayName: Deploy Celery Worker
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Configure Managed Identity'
      inputs:
        azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Assign managed identity and wait for propagation
          az containerapp identity assign \
            --name freshersparkapp \
            --resource-group freshersparkresource
          
          echo "Waiting 30 seconds for identity propagation..."
          sleep 30
          
          # Get principal ID with retry logic
          for i in {1..5}; do
            PRINCIPAL_ID=$(az containerapp identity show \
              --name freshersparkapp \
              --resource-group freshersparkresource \
              --query principalId --output tsv)
            
            if [ -n "$PRINCIPAL_ID" ]; then
              break
            fi
            echo "Retrying to get principal ID... Attempt $i"
            sleep 10
          done
          
          if [ -z "$PRINCIPAL_ID" ]; then
            echo "##vso[task.logissue type=error]Failed to get principal ID"
            exit 1
          fi
          
          echo "Principal ID: $PRINCIPAL_ID"
          
          # Grant Key Vault access
          az keyvault set-policy \
            --name $(keyVaultName) \
            --object-id $PRINCIPAL_ID \
            --secret-permissions get list

    - task: AzureCLI@2
      displayName: 'Deploy Celery Worker'
      inputs:
        azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          if [ "$(environmentType)" = "prod" ]; then
            # Production - Use Key Vault references
            az containerapp update \
              --name freshersparkapp \
              --resource-group freshersparkresource \
              --container-name celery-worker \
              --image $(containerRegistry)/$(celeryImageRepository):$(tag) \
              --set-env-vars \
                CELERY_BROKER_URL='amqp://@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/rabbitmq-user/):@Microsoft.KeyVault(SecretUri=https://$(keyVaultName).vault.azure.net/secrets/rabbitmq-pass/)@rabbitmq//' \
                CELERY_ACCEPT_CONTENT='application/json' \
                CELERY_RESULT_SERIALIZER='json' \
                CELERY_TASK_SERIALIZER='json' \
                CELERY_TIMEZONE='Asia/Kolkata' \
                CELERY_RESULT_BACKEND='rpc://' \
                DJANGO_SETTINGS_MODULE='job_portal.settings'
          else
            # Development - Use local secrets
            az containerapp secret set \
              --name freshersparkapp \
              --resource-group freshersparkresource \
              --secrets \
                "rabbitmq-user=$(RABBITMQ_USER)" \
                "rabbitmq-pass=$(RABBITMQ_PASS)"
            
            az containerapp update \
              --name freshersparkapp \
              --resource-group freshersparkresource \
              --container-name celery-worker \
              --image $(containerRegistry)/$(celeryImageRepository):$(tag) \
              --set-env-vars \
                CELERY_BROKER_URL='amqp://$(secretref:rabbitmq-user):$(secretref:rabbitmq-pass)@rabbitmq//' \
                CELERY_ACCEPT_CONTENT='application/json' \
                CELERY_RESULT_SERIALIZER='json' \
                CELERY_TASK_SERIALIZER='json' \
                CELERY_TIMEZONE='Asia/Kolkata' \
                CELERY_RESULT_BACKEND='rpc://' \
                DJANGO_SETTINGS_MODULE='job_portal.settings'
          fi
          
          # Scale settings
          az containerapp update \
            --name freshersparkapp \
            --resource-group freshersparkresource \
            --container-name celery-worker \
            --min-replicas 2 \
            --max-replicas 4