trigger:
- main

variables:
  azureSubscription: 'Your-Azure-Service-Connection'
  resourceGroup: 'your-resource-group'
  containerRegistry: 'yourregistry.azurecr.io'
  containerAppName: 'django-app'
  containerAppEnv: 'your-container-apps-env'
  composeFilePath: '**/docker-compose.yml'

stages:
- stage: Build
  displayName: Build and push images
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DockerCompose@0
      displayName: 'Build services'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(composeFilePath)
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'

    - task: DockerCompose@0
      displayName: 'Push services'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(composeFilePath)
        action: 'Push services'
        additionalImageTags: '$(Build.BuildId)'

- stage: Deploy
  displayName: Deploy to Azure Container Apps
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Container Apps'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Login to ACR
          az acr login --name $(containerRegistry)
          
          # Get the latest image tags
          WEB_IMAGE=$(az acr repository show-tags --name $(containerRegistry) --repository your_web_image_name --orderby time_desc --query [0] -o tsv)
          DB_IMAGE=$(az acr repository show-tags --name $(containerRegistry) --repository postgres --orderby time_desc --query [0] -o tsv)
          REDIS_IMAGE=$(az acr repository show-tags --name $(containerRegistry) --repository redis --orderby time_desc --query [0] -o tsv)
          
          # Create or update container app
          az containerapp create \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --environment $(containerAppEnv) \
            --image $(containerRegistry)/your_web_image_name:$WEB_IMAGE \
            --target-port 8000 \
            --ingress external \
            --env-vars \
              DJANGO_SETTINGS_MODULE=your_project.settings.production \
              DB_HOST=your-db-container \
              DB_NAME=$(DB_NAME) \
              DB_USER=$(DB_USER) \
              DB_PASSWORD=$(DB_PASSWORD)
          
          # Deploy database (if using Azure Database for PostgreSQL instead of container, skip this)
          az containerapp create \
            --name django-db \
            --resource-group $(resourceGroup) \
            --environment $(containerAppEnv) \
            --image $(containerRegistry)/postgres:$DB_IMAGE \
            --env-vars \
              POSTGRES_DB=$(DB_NAME) \
              POSTGRES_USER=$(DB_USER) \
              POSTGRES_PASSWORD=$(DB_PASSWORD) \
            --secrets postgres-password=$(DB_PASSWORD)