trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'd932d5a2-7e91-48b9-b339-918c998b3ae9'
  containerRegistry: 'freshersparkregistry.azurecr.io'
  
  # Image repositories
  # rabbitmqImageRepository: 'freshersparkrabbitmq'
  # rabbitmqDockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.rabbitmq'
  celeryImageRepository: 'freshersparkcelery'
  celeryDockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.celery'
  
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push images
  jobs:
  - job: BuildImages
    displayName: Build Docker Images
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build and push RabbitMQ image
    #- task: Docker@2
    #  displayName: Build and push RabbitMQ image
    #  inputs:
    #    command: buildAndPush
    #    repository: $(rabbitmqImageRepository)
    #    dockerfile: $(rabbitmqDockerfilePath)
    #    containerRegistry: $(dockerRegistryServiceConnection)
    #    tags: |
    #      $(tag)
    #      latest
    #    buildContext: '$(Build.SourcesDirectory)'
    
    # Build and push Celery image
    - task: Docker@2
      displayName: Build and push Celery image
      inputs:
        command: buildAndPush
        repository: $(celeryImageRepository)
        dockerfile: $(celeryDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        buildContext: '$(Build.SourcesDirectory)'

- stage: Deploy
  displayName: Deploy Services
  dependsOn: Build
  jobs:
  - job: DeployServices
    displayName: Deploy Services
    pool:
      vmImage: $(vmImageName)
    steps:
    # Deploy RabbitMQ
    #- task: AzureCLI@2
    #  displayName: 'Deploy RabbitMQ'
    #  inputs:
    #    azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
    #    scriptType: 'bash'
    #    scriptLocation: 'inlineScript'
    #    inlineScript: |
    #      # Update RabbitMQ container
    #      az containerapp update \
    #        --name freshersparkapp \
    #        --resource-group freshersparkresource \
    #        --container-name rabbitmq \
    #        --image $(containerRegistry)/$(rabbitmqImageRepository):$(tag) \
    #        --set properties.template.containers[0].ports='[{"port": 5672}, {"port": 15672}]'
          
          # Configure ingress for management UI
    #     az containerapp ingress update \
    #        --name freshersparkapp \
    #        --resource-group freshersparkresource \
    #        --type external \
    #        --target-port 15672 \
    #        --transport auto
          
          # Assign managed identity for Key Vault access
    #      az containerapp identity assign \
    #        --name freshersparkapp \
    #        --resource-group freshersparkresource
    
    # Deploy Celery Worker
    - task: AzureCLI@2
      displayName: 'Deploy Celery Worker'
      inputs:
        azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Add Celery worker container
          az containerapp update \
            --name freshersparkapp \
            --resource-group freshersparkresource \
            --container-name celery-worker \
            --image $(containerRegistry)/$(celeryImageRepository):$(tag) \
            --env-vars \
              CELERY_BROKER_URL='amqp://$(secretref:rabbitmq-user):$(secretref:rabbitmq-pass)@rabbitmq//' \
              CELERY_ACCEPT_CONTENT='application/json' \
              CELERY_RESULT_SERIALIZER='json' \
              CELERY_TASK_SERIALIZER='json' \
              CELERY_TIMEZONE='Asia/Kolkata' \
              CELERY_RESULT_BACKEND='rpc://' \
              DJANGO_SETTINGS_MODULE='job_portal.settings' \
            --secrets \
              rabbitmq-user=yourrabbitmquser \
              rabbitmq-pass=yourrabbitmqpassword
          
          # Optionally scale Celery workers
          az containerapp update \
            --name freshersparkapp \
            --resource-group freshersparkresource \
            --container-name celery-worker \
            --min-replicas 2 \
            --max-replicas 4