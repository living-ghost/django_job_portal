trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'd932d5a2-7e91-48b9-b339-918c998b3ae9'
  containerRegistry: 'freshersparkregistry.azurecr.io'
  
  rabbitmqImageRepository: 'freshersparkrabbitmq'
  rabbitmqDockerfilePath: '$(Build.SourcesDirectory)/Dockerfile.rabbitmq'
  
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

  keyVaultName: 'freshersparkkeyvault'

stages:
- stage: Build
  displayName: Build and push images
  jobs:
  - job: BuildImages
    displayName: Build RabbitMQ Docker Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push RabbitMQ image
      inputs:
        command: buildAndPush
        repository: $(rabbitmqImageRepository)
        dockerfile: $(rabbitmqDockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
        buildContext: '$(Build.SourcesDirectory)'

- stage: Deploy
  displayName: Deploy RabbitMQ
  dependsOn: Build
  jobs:
  - job: DeployRabbitMQ
    displayName: Deploy RabbitMQ
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy RabbitMQ'
      inputs:
        azureSubscription: '8ce37efe-06df-47c4-b146-001d3ddfb1ba'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          APP_NAME="freshersparkapp"
          RESOURCE_GROUP="freshersparkresource"
          KEYVAULT_NAME="$(keyVaultName)"
          RABBITMQ_USER_SECRET="rabbitmq-user"
          RABBITMQ_PASS_SECRET="rabbitmq-pass"

          # Assign system-managed identity
          az containerapp identity assign \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP

          # Get the principal ID of the system identity
          PRINCIPAL_ID=$(az containerapp show \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "identity.principalId" \
            --output tsv)

          # Grant 'get' permission to secrets in Key Vault
          az keyvault set-policy \
            --name $KEYVAULT_NAME \
            --object-id $PRINCIPAL_ID \
            --secret-permissions get

          # Set secrets using Key Vault references
          az containerapp secret set \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --secrets \
              $RABBITMQ_USER_SECRET=keyvaultref:https://$KEYVAULT_NAME.vault.azure.net/secrets/$RABBITMQ_USER_SECRET,identityref:system \
              $RABBITMQ_PASS_SECRET=keyvaultref:https://$KEYVAULT_NAME.vault.azure.net/secrets/$RABBITMQ_PASS_SECRET,identityref:system

          # Update container with image and environment variables
          az containerapp update \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --container-name rabbitmq \
            --image $(containerRegistry)/$(rabbitmqImageRepository):$(tag) \
            --env-vars \
              RABBITMQ_DEFAULT_USER=secretref:$RABBITMQ_USER_SECRET \
              RABBITMQ_DEFAULT_PASS=secretref:$RABBITMQ_PASS_SECRET

          # Enable external ingress for RabbitMQ dashboard
          az containerapp ingress update \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --type external \
            --target-port 15672 \
            --transport auto
